#include <iostream>
#include <string>
#include <chrono>
#include <thread>
#include "Biblioteca.h"
#include "tipos_livros/LivroFiccao.h"
#include "tipos_leitores/LeitorComum.h"

void limparTela() {
    // Limpa a tela no terminal
    std::cout << "\033[2J\033[1;1H";
}

void efeitoDigitacao(const std::string& texto, int delay = 50) {
    // Anima√ß√£o de digita√ß√£o
    for (const char& c : texto) {
        std::cout << c << std::flush;
        std::this_thread::sleep_for(std::chrono::milliseconds(delay));
    }
    std::cout << std::endl;
}

void carregando(const std::string& acao) {
    // Simula carregamento
    std::cout << acao;
    for (int i = 0; i < 3; ++i) {
        std::cout << "." << std::flush;
        std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
    std::cout << std::endl;
}

void exibirMenu() {
    limparTela();
    std::cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    std::cout << "‚ïë            üåü  Sistema de Biblioteca üåü           ‚ïë\n";
    std::cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£\n";
    std::cout << "‚ïë 1. üìö Registrar Livro                             ‚ïë\n";
    std::cout << "‚ïë 2. üßë Registrar Leitor                            ‚ïë\n";
    std::cout << "‚ïë 3. üìñ Realizar Empr√©stimo                         ‚ïë\n";
    std::cout << "‚ïë 4. üîÑ Devolver Livro                              ‚ïë\n";
    std::cout << "‚ïë 5. ‚è≥ Prorrogar Empr√©stimo                         ‚ïë\n";
    std::cout << "‚ïë 6. üìä Gerar Relat√≥rio de Empr√©stimos por Tipo     ‚ïë\n";
    std::cout << "‚ïë 7. üí∏ Gerar Relat√≥rio de Multas Pendentes         ‚ïë\n";
    std::cout << "‚ïë 8. üîç Exibir Hist√≥rico de Empr√©stimos             ‚ïë\n";
    std::cout << "‚ïë 9. üö® Notificar Atrasos                           ‚ïë\n";
    std::cout << "‚ïë10. üíæ Salvar Dados                                ‚ïë\n";
    std::cout << "‚ïë11. üìÇ Carregar Dados                              ‚ïë\n";
    std::cout << "‚ïë 0. ‚ùå Sair                                        ‚ïë\n";
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n";
    std::cout << "Escolha uma op√ß√£o: ";
}

void iniciarSistema() {
    limparTela();
    efeitoDigitacao("Iniciando o Sistema de Biblioteca", 70);
    carregando("Carregando dados");
    limparTela();
}

int main() {
    Biblioteca biblioteca;
    int opcao;

    iniciarSistema();

    do {
        exibirMenu();
        std::cin >> opcao;
        std::cin.ignore();

        switch (opcao) {
            case 1: {
                limparTela();
                std::string titulo, autor, genero;
                std::cout << "Digite o t√≠tulo do livro: ";
                std::getline(std::cin, titulo);
                std::cout << "Digite o autor: ";
                std::getline(std::cin, autor);
                std::cout << "Digite o g√™nero: ";
                std::getline(std::cin, genero);
                Livro* livro = new LivroFiccao(titulo, autor, genero);
                biblioteca.registrarLivro(livro);
                carregando("Registrando livro");
                break;
            }
            case 2: {
                limparTela();
                std::string nome;
                int idade;
                std::cout << "Digite o nome do leitor: ";
                std::getline(std::cin, nome);
                std::cout << "Digite a idade: ";
                std::cin >> idade;
                Leitor* leitor = new LeitorComum(nome, idade);
                biblioteca.registrarLeitor(leitor);
                carregando("Registrando leitor");
                break;
            }
            case 3: {
                limparTela();
                std::string nomeLeitor, tituloLivro;
                std::cout << "Digite o nome do leitor: ";
                std::getline(std::cin, nomeLeitor);
                std::cout << "Digite o t√≠tulo do livro: ";
                std::getline(std::cin, tituloLivro);
                Leitor* leitor = biblioteca.buscarLeitor(nomeLeitor);
                Livro* livro = biblioteca.buscarLivro(tituloLivro);
                if (leitor && livro) {
                    biblioteca.realizarEmprestimo(leitor, livro);
                    carregando("Processando empr√©stimo");
                } else {
                    std::cout << "‚ùå Leitor ou Livro n√£o encontrado.\n";
                }
                break;
            }
            case 4: {
                limparTela();
                std::string tituloLivro;
                std::cout << "Digite o t√≠tulo do livro para devolver: ";
                std::getline(std::cin, tituloLivro);
                Emprestimo* emprestimo = biblioteca.buscarEmprestimo(tituloLivro);
                if (emprestimo) {
                    biblioteca.devolverLivro(*emprestimo);
                    carregando("Processando devolu√ß√£o");
                } else {
                    std::cout << "‚ùå Empr√©stimo n√£o encontrado.\n";
                }
                break;
            }
            case 5: {
                limparTela();
                std::string tituloLivro;
                int diasExtras;
                std::cout << "Digite o t√≠tulo do livro para prorrogar: ";
                std::getline(std::cin, tituloLivro);
                std::cout << "Digite a quantidade de dias de prorroga√ß√£o: ";
                std::cin >> diasExtras;
                Emprestimo* emprestimo = biblioteca.buscarEmprestimo(tituloLivro);
                if (emprestimo) {
                    biblioteca.prorrogarEmprestimo(*emprestimo, diasExtras);
                    carregando("Prorrogando empr√©stimo");
                } else {
                    std::cout << "‚ùå Empr√©stimo n√£o encontrado.\n";
                }
                break;
            }
            case 6:
                limparTela();
                biblioteca.gerarRelatorioEmprestimosPorTipo();
                break;
            case 7:
                limparTela();
                biblioteca.gerarRelatorioMultasPendentes();
                break;
            case 8: {
                limparTela();
                std::string nomeLeitor;
                std::cout << "Digite o nome do leitor: ";
                std::getline(std::cin, nomeLeitor);
                biblioteca.exibirHistoricoLeitor(nomeLeitor);
                break;
            }
            case 9:
                limparTela();
                biblioteca.notificarAtraso();
                break;
            case 10:
                limparTela();
                biblioteca.salvarDados();
                carregando("Salvando dados");
                break;
            case 11:
                limparTela();
                biblioteca.carregarDados();
                carregando("Carregando dados");
                break;
            case 0:
                limparTela();
                efeitoDigitacao("Encerrando o sistema...", 50);
                break;
            default:
                std::cout << "‚ùå Op√ß√£o inv√°lida. Tente novamente.\n";
                break;
        }
    } while (opcao != 0);

    return 0;
}
